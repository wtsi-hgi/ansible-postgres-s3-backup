#!/usr/bin/env bash

set -eu -o pipefail

MC="{{ postgres_s3_backup_mc_location }}"
MC_CONFIG="{{ postgres_s3_backup_mc_configuration_location | dirname }}"
PYTHON="{{ postgres_s3_backup_venv_location }}/bin/python"
backupInfo_SCRIPT="{{ postgres_s3_backup_info_script_location }}"
BACKUP_LOCATION="{{ postgres_s3_backup_s3_location }}"
BACKUPS_TO_KEEP={{ postgres_s3_backup_number_to_keep }}
BACKUP_SUFFIX="{{ postgres_s3_backup_name_suffix }}"

function getBackupInformation()
{
    currentBackups="$("${MC}" --json -C "${MC_CONFIG}" ls "${BACKUP_LOCATION}" | jq --slurp -r '.[].key' | tr '\n' ' ')"
    echo "$("${PYTHON}" "${backupInfo_SCRIPT}" --backups ${BACKUPS_TO_KEEP} --suffix "${BACKUP_SUFFIX}" ${currentBackups})"
}

# Create new backup
backupName="$(getBackupInformation | jq -r '.new' )"
uploadLocation="${BACKUP_LOCATION}${backupName}"
>&2 echo "Uploading backup to: ${uploadLocation}"
sudo -u {{ postgres_s3_backup_pg_dumpall_user }} pg_dumpall \
    | gzip \
    | "${MC}" -C "${MC_CONFIG}" pipe "${uploadLocation}"

# Delete old backups
backupsToDelete="$(getBackupInformation | jq -r '.delete[]' | tr '\n' ' ' )"
for backupToDelete in ${backupsToDelete}; do
    toDelete="${BACKUP_LOCATION}${backupToDelete}"
    "${MC}" -C "${MC_CONFIG}" rm "${toDelete}"
done
